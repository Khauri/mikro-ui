import type * as Testing from "@marko/testing-library";
type InputObject = Record<string, any>;
type RenderContext = Testing.RenderResult & {};
type StepFunction = (context: RenderContext) => Promise<void> | void;
type Step = InputObject | StepFunction;
declare class Fixture extends Function {
    steps: Step[];
    templatePath: string;
    targets: string[];
    dir: string;
    constructor(templatePath: string, { steps, dir }: {
        steps: any;
        dir: any;
    });
    step(step: Step): this;
    loadTemplate(target: any): Promise<{
        getByLabelText<T extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T;
        getAllByLabelText<T_1 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_1[];
        queryByLabelText<T_2 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_2;
        queryAllByLabelText<T_3 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_3[];
        findByLabelText<T_4 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_4>;
        findAllByLabelText<T_5 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_5[]>;
        getByPlaceholderText<T_6 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_6;
        getAllByPlaceholderText<T_7 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_7[];
        queryByPlaceholderText<T_8 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_8;
        queryAllByPlaceholderText<T_9 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_9[];
        findByPlaceholderText<T_10 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_10>;
        findAllByPlaceholderText<T_11 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_11[]>;
        getByText<T_12 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_12;
        getAllByText<T_13 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_13[];
        queryByText<T_14 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_14;
        queryAllByText<T_15 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions): T_15[];
        findByText<T_16 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_16>;
        findAllByText<T_17 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_17[]>;
        getByAltText<T_18 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_18;
        getAllByAltText<T_19 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_19[];
        queryByAltText<T_20 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_20;
        queryAllByAltText<T_21 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_21[];
        findByAltText<T_22 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_22>;
        findAllByAltText<T_23 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_23[]>;
        getByTitle<T_24 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_24;
        getAllByTitle<T_25 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_25[];
        queryByTitle<T_26 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_26;
        queryAllByTitle<T_27 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_27[];
        findByTitle<T_28 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_28>;
        findAllByTitle<T_29 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_29[]>;
        getByDisplayValue<T_30 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_30;
        getAllByDisplayValue<T_31 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_31[];
        queryByDisplayValue<T_32 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_32;
        queryAllByDisplayValue<T_33 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_33[];
        findByDisplayValue<T_34 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_34>;
        findAllByDisplayValue<T_35 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_35[]>;
        getByRole<T_36 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions): T_36;
        getAllByRole<T_37 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions): T_37[];
        queryByRole<T_38 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions): T_38;
        queryAllByRole<T_39 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions): T_39[];
        findByRole<T_40 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_40>;
        findAllByRole<T_41 extends HTMLElement = HTMLElement>(role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_41[]>;
        getByTestId<T_42 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_42;
        getAllByTestId<T_43 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_43[];
        queryByTestId<T_44 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_44;
        queryAllByTestId<T_45 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions): T_45[];
        findByTestId<T_46 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_46>;
        findAllByTestId<T_47 extends HTMLElement = HTMLElement>(id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions): Promise<T_47[]>;
    } & {
        getByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement;
        getAllByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement[];
        queryByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement;
        queryAllByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement[];
        findByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByLabelText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        getAllByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        queryByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        queryAllByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        findByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByPlaceholderText: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement;
        getAllByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement[];
        queryByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement;
        queryAllByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions) => HTMLElement[];
        findByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByText: (id: Testing.Matcher, options?: Testing.SelectorMatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        getAllByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        queryByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        queryAllByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        findByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByAltText: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        getAllByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        queryByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        queryAllByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        findByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByTitle: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        getAllByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        queryByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        queryAllByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        findByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByDisplayValue: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions) => HTMLElement;
        getAllByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions) => HTMLElement[];
        queryByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions) => HTMLElement;
        queryAllByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions) => HTMLElement[];
        findByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByRole: (role: Testing.ByRoleMatcher, options?: Testing.ByRoleOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
        getByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        getAllByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        queryByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement;
        queryAllByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions) => HTMLElement[];
        findByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement>;
        findAllByTestId: (id: Testing.Matcher, options?: Testing.MatcherOptions, waitForElementOptions?: Testing.waitForOptions) => Promise<HTMLElement[]>;
    } & {
        container: HTMLElement | DocumentFragment;
        instance: any;
        debug: (element?: Element | HTMLDocument | (Element | HTMLDocument)[], maxLength?: number, options?: Testing.prettyFormat.PrettyFormatOptions) => void;
        emitted<N extends string = "*">(type?: N extends "input" | "update" | "create" | "render" | "mount" | "destroy" ? never : N): NonNullable<import("@marko/testing-library/dist/shared").EventRecord[N]>;
        rerender(newInput?: unknown): Promise<void>;
        cleanup(): void;
    }>;
    rerender(context: RenderContext, input?: InputObject): Promise<void>;
    getTitle(): any;
    run(): Promise<void>;
}
export declare function fixture(templatePath: string, steps?: Step | Step[]): Fixture;
export declare function setTestFunction(testFunction: Function): void;
export {};
