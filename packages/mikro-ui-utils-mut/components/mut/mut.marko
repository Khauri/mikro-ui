static function cloneObject(obj) {
    if(Array.isArray(obj)) {
        return obj.map(cloneObject);
    }
    if(typeof obj === 'object' && !!obj) {
        return Object.entries(obj).reduce((acc, [key, value]) => {
            acc[key] = cloneObject(value);
            return acc;
        }, {});
    }
    return obj;
}

<!-- Supports pre tags-api v0.5.3 which changes default to value -->
<attrs/{default: _d, value = _d, untracked = false } />

<let/lastTrackingValue = null />

<let/getSet = (() => {
    // The object passed in might already be frozen, so clone to unfreeze
    let data = cloneObject(value);
    if(typeof data === 'function') {
        data = data();
    }
    return function $(valueOrGetter) {
        if(typeof valueOrGetter === 'undefined') {
            return data;
        }
        data = typeof valueOrGetter === 'function' 
            ? valueOrGetter(data)
            : valueOrGetter;
        if(!untracked) {
            lastTrackingValue = Date.now() + Math.random();
        }
    };
})() />

<const/binded = (() => {
  const fn = getSet.bind(lastTrackingValue);
  const handler = {
    get(target, prop, receiver) {
      if(prop === 'valueOf') {
        return () => target();
      }
      if(prop === 'toString') {
        return () => `${target()}`;
      }
      return Reflect.get(fn(), prop, receiver);
    }
  };
  const proxy = new Proxy(fn, handler);
  return proxy;
})() />

<return=binded
    defaultChange(v){getSet(v)} 
    valueChange(v){getSet(v)}
/>