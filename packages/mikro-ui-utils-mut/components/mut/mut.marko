static function cloneObject(obj) {
  if(Array.isArray(obj)) {
    return obj.map(cloneObject);
  }
  if(typeof obj === 'object' && !!obj) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[key] = cloneObject(value);
      return acc;
    }, {});
  }
  return obj;
}

static function wrapWithProxy(getter, onUpdate) {
  const handler = {
    get(target, prop, receiver) {
      if(prop === 'valueOf') {
        return () => target();
      }
      if(prop === 'toString') {
        return () => `${target()}`;
      }
      let value = target()[prop];
      if(typeof value === 'object' && !!value) {
        return wrapWithProxy(() => value, onUpdate);
      }
      return value;
    },
    deleteProperty(target, prop) {
      delete target()[prop];
      onUpdate();
      return true;
    },
    defineProperty(target, prop, descriptor){
      Object.defineProperty(target(), prop, descriptor);
      onUpdate();
      return true;
    },
    set(target, prop, value) {
      target()[prop] = value;
      onUpdate();
      return true;
    }
  };
  return new Proxy(getter, handler);
}

<!-- Supports pre tags-api v0.5.3 which changes default to value -->
<attrs/{default: _d, value = _d, untracked = false } />

<let/lastTrackingValue = [] />

<const/triggerUpdate() {
  lastTrackingValue = [];
} />

<let/getSet = (() => {
  // The object passed in might already be frozen, so clone to unfreeze
  let data = cloneObject(value);
  if(typeof data === 'function') {
    data = data();
  }
  return function $(valueOrGetter) {
    if(typeof valueOrGetter === 'undefined') {
      return data;
    }
    data = typeof valueOrGetter === 'function' 
      ? valueOrGetter(data)
      : valueOrGetter;
    if(!untracked) {
      triggerUpdate();
    }
  };
})() />

<return=wrapWithProxy(getSet, triggerUpdate)
  defaultChange(v){getSet(v)} 
  valueChange(v){getSet(v)}
/>
