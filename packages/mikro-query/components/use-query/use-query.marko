import {QueryObserver} from '../..';

<use-query-client/queryClient />

<attrs/{
  queryKey,
  default: queryFn,
  enabled = true, 
  refetchInterval, 
  refetchIntervalInBackground, 
  refetchOnWindowFocus, 
  refetchOnReconnect, 
  notifyOnChangeProps, 
  notifyOnChangePropsExclusions, 
  select,
  keepPreviousData,
  placeholderData,
  // useErrorBoundary, // not a thing in Marko...yet?
  // suspense, // not a thing in Marko
  ...fetchQueryProps
} />

<id/defaultQueryKey />
<const/key=(queryKey || defaultQueryKey) />

<let/queryState=(queryClient.getQueryState(key) || {}) />

<const/isLoading=(queryState.status === 'loading' ?? true) />
<const/isIdle=(queryState.status === 'idle') />
<const/isError=(queryState.status === 'error') />
<const/isSuccess=(queryState.status === 'success') />
<const/isRefetching=(queryState.isFetching && !isLoading) />

<const/refetch() {
  queryClient.fetchQuery({queryKey: key});
} />

<lifecycle 
  onMount() {
    // The observer will run the query function if one does not already exist
    const observer = new QueryObserver(
      queryClient, 
      {
        ...fetchQueryProps,
        queryFn,
        queryKey: key,
      }
    );
    // Every time the query state is changed, the observer will call this function which will 
    // update the local state of the component which will recalculate the computed values
    this.unsubscribe = observer.subscribe((newQueryState) => {
      queryState = newQueryState;
    });
  }
  onDestroy() {
    this.unsubscribe();
  }
/>

<return={
  ...queryState,
  isLoading,
  isRefetching,
  isError,
  isSuccess,
  isIdle,
  refetch,
} />